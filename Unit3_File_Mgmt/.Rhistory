args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create()
dir.create(old.dir)
dir.create("testdir")
setwd("C:\Users\James\Documents\testdir")
setwd("C:/Users/James/Documents/testdir")
setwd("testdir")
getwd()
setwd("testdir")
setwd(old.dir)
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
ls()
file.path("mytest3.R")
file.path()
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf < c(num_vect<1)
tf <- c(num_vect<1)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_name, "James")
my_name <- c(my_char, "James")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = "")
paste("Hello", "world!", sep = " ")
paste(c(1:3), "X","Y","Z", sep="")
paste(1:3), c("X","Y","Z"), sep="")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, spe = "-")
paste(LETTERS, 1:4, sep = "-")
x <- C(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is,na(x)]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
c(x)-c(3,5,7)
evect <- c(3,5,7)
c(x) - c(evect)
[c(3,5,7)]
c(x) - [c(3,5,7)]
[evect]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- as.matrix(1:20)
play()
nxt()
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
library(swirl)
swirl
swirl()
bye
bye()
swirl()
3
bye()
swirl()
==
'=='
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE) == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
submit()
boring_function('My first
| function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
play()
nxt()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
pressure
plot(x=pressure$pressure,
y=pressure$temperature,
main="Temperature vs Pressure",
xlab="Pressure",
ylab="Temperature",
pch=23,
col="blue",
bg="red")
grid (NULL,NULL)
plot(x=pressure$temperature,
y=pressure$pressure,
main="Pressure vs Temperature",
xlab="temperature",
ylab="pressure",
pch=23,
col="blue",
bg="red")
grid (NULL,NULL)
#Set working directory Titanic directory
SleepDIR <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/HW_Data/Unit3_File_Mgmt/")
SleepData <- read.csv("sleep_data_01.csv", header=TRUE, sep=",")
SleepData
#Set sleep data working directory
GitTest <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/testrepo")
GitTest <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/testrepo/")
#Set sleep data working directory
GitTest <- setwd("C:/Users/James/Documents/SMU/testrepo/")
ls()
file()
list.files(GitTest)
GitTest <- setwd("C:/Users/James/Documents/SMU/testrepo/")
list.files("C:/Users/James/Documents/SMU/testrepo/")
list.files("GitTest")
ist.files(GitTest)
list.files(GitTest)
git commit -m "From R"
library(plyr)
#Set sleep data working directory
SleepDIR <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/HW_Data/Unit3_File_Mgmt/")
#Read CSV file into R
SleepData <- read.csv("sleep_data_01.csv", header=TRUE, sep=",")
library(plyr)
#Set sleep data working directory
SleepDIR <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/HW_Data/Unit3_File_Mgmt/")
#Read CSV file into R
SleepData <- read.csv("sleep_data_01.csv", header=TRUE, sep=",")
library(plyr)
#Set sleep data working directory
SleepDIR <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/HW_Data/Unit3_File_Mgmt/")
#Read CSV file into R
SleepData <- read.csv("sleep_data_01.csv", header=TRUE, sep=",")
colnames(SleepData)
#create vectors
AgeVector <- as.vector(SleepData$Age)
DurationVector <- as.vector(SleepData$Fare)
RSESVector <- as.vector(SleepData$Survived)
Matrix_AgeDurRSES <- cbind(AgeVector, DurationVector, RSESVector)
class(Matrix_AgeDurRSES)
SUMMARY(Matrix_AgeDurRSES)
summary(Matrix_AgeDurRSES)
Matrix_AgeDurRSES
AgeVector <- as.vector(SleepData$Age)
DurationVector <- as.vector(SleepData$Duration)
RSESVector <- as.vector(SleepData$RSES)
Matrix_AgeDurRSES <- cbind(AgeVector, DurationVector, RSESVector)
ummary(Matrix_AgeDurRSES)
summary(Matrix_AgeDurRSES)
Matrix_AgeDurRSES <- data.frame(cbind(AgeVector, DurationVector, RSESVector))
summary(Matrix_AgeDurRSES)
class(Matrix_AgeDurRSES)
DF_AgeDurRSES <- data.frame(cbind(AgeVector, DurationVector, RSESVector))
summary(DF_AgeDurRSES)
class(DF_AgeDurRSES)
apply(DF_AgeDurRSES, 2, mean, na.rm=TRUE)
apply(DF_AgeDurRSES, 2, min, na.rm=TRUE)
mean(AgeVector)
mean(AgeVector, na.rm=TRUE)
MEAN_Age <- mean(AgeVector, na.rm=TRUE)
MEAN_Age
MEAN_Duration <- mean(DurationVector, na.rm=TRUE)
MEAN_Duration
MIN_Duration <- min(DurationVector, na.rm=TRUE)
MIN_Duration
MAX_Duration <- max(DurationVector, na.rm=TRUE)
MAX_Duration
MEAN_RSES <- mean(RSES, na.rm=TRUE)
MEAN_RSES <- mean(RSESVector, na.rm=TRUE)
MEAN_RSES
D_RSES <- sd(RSESVector, na.rm=TRUE)
SD_RSES <- sd(RSESVector, na.rm=TRUE)
SD_RSES
_AgeDurRSES <- data.frame(cbind(MEAN_Age, MIN_Duration, MAX_Duration, MEAN_RSES, SD_RSES))
DF_AgeDurRSES <- data.frame(cbind(MEAN_Age, MIN_Duration, MAX_Duration, MEAN_RSES, SD_RSES))
DF_AgeDurRSES
MedianAge <- mean(AgeVector, na.rm=TRUE)
DurationMin <- min(DurationVector, na.rm=TRUE)
DurationMax <- max(DurationVector, na.rm=TRUE)
SelfEsteem <- mean(RSESVector, na.rm=TRUE)
SE_SD <- sd(RSESVector, na.rm=TRUE)
DF_AgeDurRSES <- data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))
DF_AgeDurRSES
DF_AgeDurRSES <- data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))/5
DF_AgeDurRSES
DF_AgeDurRSES <- round(data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))/5, digits = 2)
DF_AgeDurRSES
#Set sleep data working directory
SleepDIR <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/HW_Data/Unit3_File_Mgmt/")
#Read CSV file into R
SleepData <- read.csv("sleep_data_01.csv", header=TRUE, sep=",")
colnames(SleepData)
#create vectors
AgeVector <- as.vector(SleepData$Age)
DurationVector <- as.vector(SleepData$Duration)
RSESVector <- as.vector(SleepData$RSES)
#Create metric objects
MedianAge <- mean(AgeVector, na.rm=TRUE)
DurationMin <- min(DurationVector, na.rm=TRUE)
DurationMax <- max(DurationVector, na.rm=TRUE)
SelfEsteem <- mean(RSESVector, na.rm=TRUE)
SE_SD <- sd(RSESVector, na.rm=TRUE)
#Create data frame and divide results by 5, limit to 2 sig figs
DF_AgeDurRSES <- round(data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))/5, digits = 2)
return(DF_AgeDurRSES)
HW3FileMgmt <- function(x) {
#Set sleep data working directory
SleepDIR <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/HW_Data/Unit3_File_Mgmt/")
#Read CSV file into R
SleepData <- read.csv("sleep_data_01.csv", header=TRUE, sep=",")
#create vectors
AgeVector <- as.vector(SleepData$Age)
DurationVector <- as.vector(SleepData$Duration)
RSESVector <- as.vector(SleepData$RSES)
#Create metric objects
MedianAge <- mean(AgeVector, na.rm=TRUE)
DurationMin <- min(DurationVector, na.rm=TRUE)
DurationMax <- max(DurationVector, na.rm=TRUE)
SelfEsteem <- mean(RSESVector, na.rm=TRUE)
SE_SD <- sd(RSESVector, na.rm=TRUE)
#Create data frame and divide results by 5, limit to 2 sig figs
DF_AgeDurRSES <- round(data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))/5, digits = 2)
return(DF_AgeDurRSES)
}
HW3FileMgmt <- function(x) {
#create vectors
AgeVector <- as.vector(SleepData$Age)
DurationVector <- as.vector(SleepData$Duration)
RSESVector <- as.vector(SleepData$RSES)
#Create metric objects
MedianAge <- mean(AgeVector, na.rm=TRUE)
DurationMin <- min(DurationVector, na.rm=TRUE)
DurationMax <- max(DurationVector, na.rm=TRUE)
SelfEsteem <- mean(RSESVector, na.rm=TRUE)
SE_SD <- sd(RSESVector, na.rm=TRUE)
#Create data frame and divide results by 5, limit to 2 sig figs
DF_AgeDurRSES <- round(data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))/5, digits = 2)
return(DF_AgeDurRSES)
}
HW3FileMgmt(SleepData)
#Set sleep data working directory
SleepDIR <- setwd("C:/Users/James/Documents/SMU/MSDS_6306_Doing_Data_Science/HW_Data/Unit3_File_Mgmt/")
#Read CSV file into R
SleepData <- read.csv("sleep_data_01.csv", header=TRUE, sep=",")
#get column Names
colnames(SleepData)
#create vectors
AgeVector <- as.vector(SleepData$Age)
DurationVector <- as.vector(SleepData$Duration)
RSESVector <- as.vector(SleepData$RSES)
#Create metric objects
MedianAge <- mean(AgeVector, na.rm=TRUE)
DurationMin <- min(DurationVector, na.rm=TRUE)
DurationMax <- max(DurationVector, na.rm=TRUE)
SelfEsteem <- mean(RSESVector, na.rm=TRUE)
SE_SD <- sd(RSESVector, na.rm=TRUE)
#Create data frame and divide results by 5, limit to 2 sig figs
DF_AgeDurRSES <- round(data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))/5, digits = 2)
##############################
#######FUNCTION BUILDING######
##############################
HW3FileMgmt <- function(x) {
#create vectors
AgeVector <- as.vector(SleepData$Age)
DurationVector <- as.vector(SleepData$Duration)
RSESVector <- as.vector(SleepData$RSES)
#Create metric objects
MedianAge <- mean(AgeVector, na.rm=TRUE)
DurationMin <- min(DurationVector, na.rm=TRUE)
DurationMax <- max(DurationVector, na.rm=TRUE)
SelfEsteem <- mean(RSESVector, na.rm=TRUE)
SE_SD <- sd(RSESVector, na.rm=TRUE)
#Create data frame and divide results by 5, limit to 2 sig figs
Report <- round(data.frame(cbind(MedianAge, DurationMin, DurationMax, SelfEsteem, SE_SD))/5, digits = 2)
return(Report)
}
#function(data frame name)
HW3FileMgmt(SleepData)
